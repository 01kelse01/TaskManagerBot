from aiogram import Dispatcher, types, Bot
from aiogram.dispatcher import FSMContext

from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove

from tg_bot.keyboards.inline.callback_datas import choice_callback
from tg_bot.keyboards.inline.choice_buttons import choice, take_task, done
from tg_bot.keyboards.reply import menu
from tg_bot.models import sqlite
from tg_bot.misc.states import Task


# Starting
async def user_start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}")
    await message.answer("–Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—ó –∑—ñ –º–Ω–æ—é:", reply_markup=menu)


# –ü—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î id –≥—Ä—É–ø–∏ —è–∫–∞ —Ç–∞–º –≤–∫–∞–∑–∞–Ω–∞(—è–∫—â–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É–ø—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ó—ó id)
def get_my_group_id():
    return -1001922917876


# –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
async def enter_create_task(message: Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ:")

    # –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –Ω–∞–∑–≤–æ—é –∑–∞–¥–∞—á—ñ
    await Task.waiting_for_task_name.set()


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∑–∞–¥–∞—á—ñ
async def answer_task_name(message: Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ —Ç–∞ ID –∑–∞–º–æ–≤–Ω–∏–∫–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    task_name = message.text

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∑–∞–¥–∞—á—ñ –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(task_name=task_name)

    # –û—á—ñ–∫—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:")
    await Task.waiting_for_task_detail.set()


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á—ñ
async def answer_task_detail(message: Message, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–¥–∞—á—É —Ç–∞ –∑–∞–º–æ–≤–Ω–∏–∫–∞
    data = await state.get_data()
    user_name = message.from_user.full_name
    task_name = data.get('task_name')
    task_detail = message.text

    # _____________________________________________
    db = sqlite.Database()  # –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ë–î
    db.create_table_task()
    db.add_task((task_name, task_detail, '–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ', None, user_name))
    # –û—Ç—Ä–∏–º—É—î–º–æ id –∑–∞–ø–∏—Å—É
    task_id = db.get_last_id()
    await state.update_data(id_task=task_id)
    # _____________________________________________

    await message.answer('\n'.join([
        '–ó–∞–¥–∞—á—É —Å—Ç–≤–æ—Ä–µ–Ω–æüòä',
        f'ID –∑–∞–¥–∞—á—ñ: {task_id}',
        f'–ó–∞–º–æ–≤–Ω–∏–∫: {user_name}',
        f'–ù–∞–∑–≤–∞: {task_name}',
        f'–î–µ—Ç–∞–ª—ñ: {task_detail}',
    ]), reply_markup=choice)

    # –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    await Task.waiting_for_send_task.set()


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤ –≥—Ä—É–ø—É
def enter_send_task_to_wrapper(bot: Bot):
    async def enter_send_task_to(call: CallbackQuery, state: FSMContext):
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑—ñ —Å—Ç–∞–Ω—É
        data = await state.get_data()
        db = sqlite.Database()
        info = db.get_info_task(data.get('id_task'))

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–¥–∞—á—É —Ä–∞–∑–æ–º –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é —É –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
        GROUP_CHAT_ID = get_my_group_id()
        task_text = '\n'.join([
            '‚úã',
            f'–ù–æ–≤–∞ –∑–∞–¥–∞—á–∞ –≤—ñ–¥: {info[5]}',
            f'ID –∑–∞–¥–∞—á—ñ: {info[0]}',
            f'–ù–∞–∑–≤–∞: {info[1]}',
            f'–û–ø–∏—Å: {info[2]}',
            f'–°—Ç–∞—Ç—É—Å: {info[3]}'
        ])
        await bot.send_message(GROUP_CHAT_ID, task_text, reply_markup=take_task)
        # -------------------------------------------------------
        await call.message.reply("–ó–∞–¥–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!")
        await state.finish()

    return enter_send_task_to


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑–∞–¥–∞—á—ñ
def get_id_task(callback: CallbackQuery) -> int:
    data_text = callback.message.text.split('\n')
    data = None
    for data in data_text:
        if data.startswith("ID"):
            data = data
            break
    id_task = int(str(data).split(":")[1].strip())
    return id_task


# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–¥–∞—á—É
async def enter_take_task_in_group(call: CallbackQuery):
    performer = call.from_user.full_name

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑–∞–¥–∞—á—ñ
    data = tuple(call.message.text.split('\n'))[2]
    id_task = int(str(data).split(":")[1].strip())

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è —Ç–∞ —ó—ó —Å—Ç–∞—Ç—É—Å—É
    db = sqlite.Database()
    db.update_task_performer(id_task, performer)
    db.update_task_status(id_task, '–í —Ä–æ–±–æ—Ç—ñ')

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    info = db.get_info_task(id_task)
    task_text = '\n'.join([
        '–û–Ω–æ–≤–ª–µ–Ω–æ üì¶',
        f'ID –∑–∞–¥–∞—á—ñ: {info[0]}',
        f'–ù–∞–∑–≤–∞: {info[1]}',
        f'–û–ø–∏—Å: {info[2]}',
        f'–°—Ç–∞—Ç—É—Å: {info[3]}',
        f'–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {info[5]}'
    ])
    await call.message.edit_text(task_text)
    await call.message.edit_reply_markup(reply_markup=done)
    await call.answer("–ó–∞–¥–∞—á—É –≤–∑—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É!")


# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
async def update_task_to_done(call: CallbackQuery):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑–∞–¥–∞—á—ñ
    id_task = get_id_task(callback=call)
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
    db = sqlite.Database()
    db.update_task_status(id_task, '–í–∏–∫–æ–Ω–∞–Ω–æ')

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    info = db.get_info_task(id_task)
    task_text = '\n'.join([
        '–û–Ω–æ–≤–ª–µ–Ω–æ üì¶',
        f'ID –∑–∞–¥–∞—á—ñ: {info[0]}',
        f'–ù–∞–∑–≤–∞: {info[1]}',
        f'–û–ø–∏—Å: {info[2]}',
        f'–°—Ç–∞—Ç—É—Å: {info[3]}',
        f'–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {info[5]}'
    ])
    await call.message.edit_text(task_text)
    await call.answer("–ó–∞–¥–∞—á—É –≤–∏–∫–æ–Ω–∞–Ω–æ!")


# End --------------------------------------------------------------------------------------------------------

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–¥–∞—á—É ---------start---------------
async def enter_info_task(message: Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á—ñ —è–∫—É –í–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏:")

    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è id –∑–∞–¥–∞—á—ñ
    await Task.waiting_for_id_task_detail.set()


async def answer_info_task(message: Message, state: FSMContext):
    id_task = message.text
    await message.answer(f'–í–∏ –≤–≤–µ–ª–∏ -> {id_task}')

    # –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ë–î
    db = sqlite.Database()
    result = db.get_info_task(id_task)
    await message.answer('\n'.join([
        f'–î–∞–Ω—ñ –ø—Ä–æ –∑–∞–¥–∞—á—É:',
        f'ID: {result[0]}',
        f'–ù–∞–∑–≤–∞: {result[1]}',
        f'–û–ø–∏—Å: {result[2]}',
        f'–°—Ç–∞—Ç—É—Å: {result[3]}',
        f'–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {result[4]}',
        f'–ó–∞–º–æ–≤–Ω–∏–∫: {result[5]}'
    ]))

    await state.finish()


# End --------------------------------------------------------------------------------------------------------

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ --------------start--------
async def enter_delete_task(message: Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á—ñ —è–∫—É –í–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:")

    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è id –∑–∞–¥–∞—á—ñ
    await Task.waiting_for_id_task_delete.set()


async def answer_delete_task(message: Message, state: FSMContext):
    # –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ë–î
    id_task = message.text
    db = sqlite.Database()
    res = db.get_info_task(id_task)
    db.delete_task(id_task)
    await message.answer('\n'.join([
        f"ID:{res[0]}",
        f"–ù–∞–∑–≤–∞:{res[1]}",
        f"–ó–∞–¥–∞—á–∞ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!"
    ]))
    await state.finish()


# End --------------------------------------------------------------------------------------------------------

# ---------------
def my_handler_wrapper(bot: Bot):
    async def my_handler(message: types.Message):
        chat_member = await bot.get_chat_member(message.chat.id, bot.id)
        if chat_member.status == types.ChatMemberStatus.ADMINISTRATOR and message.content_type == types.ContentType.TEXT:
            return  # –ë–æ—Ç —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —É —á–∞—Ç—ñ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î —Ç–µ–∫—Å—Ç–æ–≤–∏–º, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–≥—É–≤–∞—Ç–∏

    return my_handler


# ---------------

def register_user(dp: Dispatcher, bot: Bot):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
    dp.register_message_handler(enter_create_task, text="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É")
    dp.register_message_handler(answer_task_name, state=Task.waiting_for_task_name)
    dp.register_message_handler(answer_task_detail, state=Task.waiting_for_task_detail)
    # End --------------------------------------------------------------------------------------------------------
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—É —Ç–∞ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è
    dp.register_callback_query_handler(enter_send_task_to_wrapper(bot), state=Task.waiting_for_send_task)
    dp.register_callback_query_handler(enter_take_task_in_group, choice_callback.filter(name='take_task'))
    dp.register_callback_query_handler(update_task_to_done, choice_callback.filter(name="done"))
    # End --------------------------------------------------------------------------------------------------------
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–¥–∞—á—É
    dp.register_message_handler(enter_info_task, text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–¥–∞—á—É")
    dp.register_message_handler(answer_info_task, state=Task.waiting_for_id_task_detail)
    # End --------------------------------------------------------------------------------------------------------
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á—ñ
    dp.register_message_handler(enter_delete_task, text="–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É")
    dp.register_message_handler(answer_delete_task, state=Task.waiting_for_id_task_delete)
    # End --------------------------------------------------------------------------------------------------------
    dp.register_message_handler(my_handler_wrapper(bot), chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
