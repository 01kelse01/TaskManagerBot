import asyncpg.exceptions
from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from tg_bot.keyboards.inline.callback_datas import choice_callback
from tg_bot.keyboards.inline.choice_buttons import send, take, make_done
from tg_bot.misc.states import Task2, Command
from tg_bot.models.postgresql import Database


# –ü—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î id –≥—Ä—É–ø–∏ —è–∫–∞ —Ç–∞–º –≤–∫–∞–∑–∞–Ω–∞(—è–∫—â–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É–ø—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ó—ó id)
def get_my_group_id():
    return -1001922917876


async def enter_start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}\n–û–±–µ—Ä–∏ –¥—ñ—ó –∑—ñ –º–Ω–æ—é:")


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –∑–∞–º–æ–≤–Ω–∏–∫–∞ –∑–∞–¥–∞—á—ñ —Ç–∞ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏
async def enter_create_new_task(message: Message, db: Database):
    try:
        res = await db.add_customer(fullname=message.from_user.full_name, username=message.from_user.username,
                                    telegram_id=message.from_user.id, role_name='–ó–∞–º–æ–≤–Ω–∏–∫')
    except asyncpg.exceptions.UniqueViolationError:
        res = await db.select_user(table_name='Customers', telegram_id=message.from_user.id)
    await message.answer('–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è:')
    await Task2.waiting_for_task_name.set()


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ç–∞ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π
async def answer_task_name(message: Message, state: FSMContext):
    await state.update_data(task_name=message.text)
    await message.answer("–ê —Ç–µ–ø–µ—Ä —ó—ó –æ–ø–∏—Å:")
    await Task2.waiting_for_task_detail.set()


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –≤ —Ç–∞–±–ª–∏—Ü—é –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è"
def wrapper_answer_task_detail(db: Database):
    async def answer_task_detail(message: Message, state: FSMContext):
        await message.answer('–û—Ç—Ä–∏–º–∞–≤ –í–∞—à—ñ –¥–∞–Ω—ñ —Ç–∞ —Ñ–æ—Ä–º—É—é –∑–∞–≤–¥–∞–Ω–Ω—è')
        # –ó–±—ñ—Ä —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:
        # Task
        data = await state.get_data()
        task_name = data.get('task_name')
        task_detail = message.text
        task_id = await db.add_task(name=task_name, detail=task_detail)

        # Customer
        customer_info = await db.select_user(table_name="Customers", telegram_id=message.from_user.id)
        customer_id = dict(customer_info).get('id')
        customer_name = dict(customer_info).get('fullname')

        # Status
        try:
            status_id = await db.add_status(name="–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è")
        except asyncpg.exceptions.UniqueViolationError:
            status_id = await db.get_status_id("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è")
        status = await db.get_status_name(status_id=status_id)

        # –ó–∞–ø–∏—Å –≤ –≥–æ–ª–æ–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é
        entry_id = await db.add_entry_in_worksheet(task_id=task_id, status_id=status_id, customer_id=customer_id)
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è

        text_task = "\n".join([
            "–°—Ç–≤–æ—Ä–µ–Ω–∞ –Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ üëã",
            f"–ó–∞–ø–∏—Å ID: {entry_id}",
            f"–ù–∞–∑–≤–∞: {task_name}",
            f"–û–ø–∏—Å: {task_detail}",
            f"–ó–∞–º–æ–≤–Ω–∏–∫: {customer_name}",
            f"–°—Ç–∞—Ç—É—Å: {status}"
        ])

        await message.answer(text_task, reply_markup=send)

        # Finish FSM Context
        await state.finish()

    return answer_task_detail


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ –≥—Ä—É–ø–∏
def wrapper_enter_send_new_task(bot: Bot):
    async def enter_send_new_task(call: CallbackQuery):
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–¥–∞—á—É —Ä–∞–∑–æ–º –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é —É –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
        task = call.message.text

        GROUP_CHAT_ID = get_my_group_id()
        await bot.send_message(GROUP_CHAT_ID, task, reply_markup=take)
        # -------------------------------------------------------
        await call.message.edit_reply_markup()
        await call.message.answer("–ó–∞–¥–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!")

    return enter_send_new_task


# –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–≤–∑—è—Ç–∏ –≤ —Ä–æ–±–æ—Ç—É"
async def enter_take_new_task(call: CallbackQuery, db: Database):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤—ñ–¥ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    full_name = call.from_user.full_name
    username = call.from_user.username
    telegram_id = call.from_user.id
    role_name = "–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å"

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è –≤ —Ç–∞–±–ª–∏—Ü—é
    try:
        performer_id = await db.add_performer(full_name, username, telegram_id, role_name)
    except asyncpg.exceptions.UniqueViolationError:
        tmp_record = await db.select_user(table_name='Performers', telegram_id=telegram_id)
        performer_id = tmp_record['id']

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑–∞–ø–∏—Å—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    entry_id = int(call.message.text.split('\n')[1].split(":")[1])  # str -> int

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –π–æ–≥–æ id —Ç–∞ name
    try:
        status_taken_id = await db.add_status(name='–í —Ä–æ–±–æ—Ç—ñ')
    except asyncpg.exceptions.UniqueViolationError:
        status_taken_id = await db.get_status_id(name="–í —Ä–æ–±–æ—Ç—ñ")
    status = await db.get_status_name(status_id=status_taken_id)

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ worksheet
    await db.update_entry_in_worksheet(entry_id=entry_id, status_id=status_taken_id, performer_id=performer_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    new_text = await format_text(call.message.text)
    my_text = '\n'.join([
        f'{new_text}',
        f'–°—Ç–∞—Ç—É—Å: {status}',
        f'–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {full_name}'
    ])
    await call.message.edit_text(text=my_text)
    await call.message.edit_reply_markup(reply_markup=make_done)
    await call.answer("–ó–∞–¥–∞—á—É –≤–∑—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É!")


# ------------------------------------------------------------------------------------------------
async def format_text(text: str) -> str:
    list_text = text.split('\n')
    result = '\n'.join([
        f'{list_text[1]}',
        f'{list_text[2]}',
        f'{list_text[3]}',
        f'{list_text[4]}'
    ])
    return result


async def check_performer(db: Database, entry_id: int, telegram_id: int):
    performer = await db.select_user(table_name='Performers', telegram_id=telegram_id)
    performer_id = dict(performer).get('id')
    print('id', performer_id)
    entry = await db.select_entry(entry_id=entry_id)
    print('entry', entry)


# ------------------------------------------------------------------------------------------------

async def enter_make_done(call: CallbackQuery, db: Database):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –≤–∏–∫–æ–Ω–∞–≤—Ü—è —á–µ—Ä–µ–∑ telegram_id
    performer = await db.select_user(table_name="Performers", telegram_id=call.from_user.id)
    performer_id = dict(performer).get('id')
    full_name = dict(performer).get('fullname')

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∑–∞–ø–∏—Å—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    entry_id = int(call.message.text.split('\n')[0].split(":")[1])  # str -> int
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –π–æ–≥–æ id —Ç–∞ name
    try:
        status_taken_id = await db.add_status(name='–í–∏–∫–æ–Ω–∞–Ω–æ')
    except asyncpg.exceptions.UniqueViolationError:
        status_taken_id = await db.get_status_id(name="–í–∏–∫–æ–Ω–∞–Ω–æ")
    status = await db.get_status_name(status_id=status_taken_id)

    # await check_performer(db=db,)

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ worksheet
    await db.update_entry_in_worksheet(entry_id=entry_id, status_id=status_taken_id, performer_id=performer_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    new_text = call.message.text.split('\n')
    my_text = '\n'.join([
        f'{new_text[0]}',
        f'{new_text[1]}',
        f'{new_text[2]}',
        f'{new_text[3]}',
        f'–°—Ç–∞—Ç—É—Å: {status}',
        f'–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {full_name}'
    ])
    await call.message.edit_text(text=my_text)
    await call.answer('–í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è')


def register_user_in_users(dp: Dispatcher, db: Database, bot: Bot):
    dp.register_message_handler(enter_start, commands=['my_start'])
    dp.register_message_handler(lambda message: enter_create_new_task(message, db), commands="create_new_task")
    dp.register_message_handler(answer_task_name, state=Task2.waiting_for_task_name)
    dp.register_message_handler(wrapper_answer_task_detail(db), state=Task2.waiting_for_task_detail)
    #
    dp.register_callback_query_handler(wrapper_enter_send_new_task(bot), choice_callback.filter(name='send_new_task'))
    dp.register_callback_query_handler(lambda call: enter_take_new_task(call, db),
                                       choice_callback.filter(name='take_new_task'))
    #
    dp.register_callback_query_handler(lambda call: enter_make_done(call, db), choice_callback.filter(name='done_task'))
